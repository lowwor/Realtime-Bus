apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'jacoco-android'


def preDexEnabled = "true".equals(System.getProperty("pre_dex", "true"))
def isCi = "true".equals(System.getenv("CI"))

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.lowwor.realtimebus"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode gitCommitCount()
        versionName "2.0.2"
        manifestPlaceholders = [UMENG_CHANNEL_NAME: "Unspecified",BUGLY_APP_CHANNEL: "Unspecified"]
        // Make generated apks contain version name and release time.
        archivesBaseName = "RealTimeBus_v-$versionName-${releaseTime()}"
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' ,  'armeabi-v7a' ,'x86'//'x86_64', 'arm64-v8a'
        }
        resValue "string", "version_name", "珠海公交 v"+versionName
    }
    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'

            // Enables code coverage with Jacoco only for instrumentation tests.
            // Coverage for JVM tests done by code_quality_tools/jacoco.gradle.
            testCoverageEnabled true
        }

        release {
            // Enables code coverage with Jacoco only for instrumentation tests.
            // Coverage for JVM tests done by code_quality_tools/jacoco.gradle.
            testCoverageEnabled true

            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }

    flavorDimensions 'env','channel'
    productFlavors {
        prod {
            dimension  'env'
        }
        mock {
            dimension  'env'
            applicationIdSuffix = ".mock"
        }
        fir {
            dimension  'channel'
            manifestPlaceholders = [UMENG_CHANNEL_NAME: "FIR.IM",BUGLY_APP_CHANNEL: "FIR.IM"]
        }
        wandoujia {
            dimension  'channel'
            manifestPlaceholders = [UMENG_CHANNEL_NAME: "WanDouJia",BUGLY_APP_CHANNEL: "WanDouJia"]
        }
        yingyongbao {
            dimension  'channel'
            manifestPlaceholders = [UMENG_CHANNEL_NAME: "YingYongBao",BUGLY_APP_CHANNEL: "YingYongBao"]
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
        //Remove flavor not needed in CI
        if (isCi) {
            if(variant.getFlavors().get(1).name.equals('fir')||variant.getFlavors().get(1).name.equals('wandoujia')) {
                variant.setIgnore(true);
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isCi
        incremental true
        javaMaxHeapSize "4g"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //parcel
    compile 'com.hannesdorfmann.parcelableplease:annotation:1.0.1'
    apt 'com.hannesdorfmann.parcelableplease:processor:1.0.1'
    //support
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    //Rx
    compile 'io.reactivex:rxjava:1.1.4'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'com.f2prateek.rx.preferences:rx-preferences:1.0.1'
    //Dagger
    apt 'com.google.dagger:dagger-compiler:2.0'
    compile 'com.google.dagger:dagger:2.0'
    compile 'org.glassfish:javax.annotation:10.0-b28'
    //Gson
    compile 'com.google.code.gson:gson:2.4'
    //Logger
    compile 'com.orhanobut:logger:1.11'
    //Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta3'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
    compile 'com.squareup.retrofit2:retrofit-mock:2.0.0-beta3'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    //Stetho
    compile 'com.facebook.stetho:stetho:1.1.0'
    //Leak Canary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    // or 1.4-beta1
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    // or 1.4-beta1
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    // or 1.4-beta1

    //RecyclerView Data Binding
    compile 'me.tatarka.bindingcollectionadapter:bindingcollectionadapter:2.0.0-beta1'
    compile 'me.tatarka.bindingcollectionadapter:bindingcollectionadapter-recyclerview:2.0.0-beta1'
    //Bugly
    compile 'com.tencent.bugly:crashreport_upgrade:1.0.0'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.0
    compile 'com.roughike:bottom-bar:1.3.3'
    compile 'com.ncapdevi:frag-nav:1.0.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.google.truth:truth:0.28'
    testCompile 'org.robolectric:robolectric:3.0'
}

//获得git commit的数目
def gitCommitCount() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        def commitCount = stdout.toString().trim().toInteger()
        return commitCount
    }
    catch (ignored) {
        return 0;
    }
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim().substring(0, 4)
}

//使用独立的signing.propreties保存签名信息
def File propFile = file('signing.properties');
if (isCi) {
    android.signingConfigs.release.storeFile = file('../lowwor.jks')
    android.signingConfigs.release.storePassword = System.getenv("STORE_PASSWORD")
    android.signingConfigs.release.keyAlias = System.getenv('KEY_ALIAS')
    android.signingConfigs.release.keyPassword = System.getenv('KEY_PASSWORD')
} else if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        def keystoreFile = file(props["STORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found: ")
    android.buildTypes.release.signingConfig = null
}

//使用独立的appkey.propreties保存appkey信息
def File appkeyPropFile = file('appkey.properties');
if (isCi) {
    android.defaultConfig.manifestPlaceholders = [UMENG_APPKEY: System.getenv("UMENG_APPKEY")]
} else if (appkeyPropFile.exists()) {
    def Properties appkeyProps = new Properties()
    appkeyProps.load(new FileInputStream(appkeyPropFile))
    android.defaultConfig.manifestPlaceholders = [UMENG_APPKEY: appkeyProps['UMENG_APPKEY']]
} else {
    println("appkey file not found: " + props["KEYSTORE_FILE"])
}


def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


